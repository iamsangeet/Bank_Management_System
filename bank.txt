//FOR TABLE BRANCHES

CREATE TABLE BRANCHES(
BRANCH_ID INTEGER PRIMARY KEY,
LOCATION VARCHAR(50) NOT NULL,
NO_OF_EMPLOYEES INTEGER NOT NULL,
BRANCH_PIC VARCHAR(250) NOT NULL
);

//FOR TABLE EMPLOYEE

CREATE TABLE EMPLOYEE(
EMPLOYEE_ID INTEGER PRIMARY KEY,
EMPLOYEE_NAME VARCHAR(50) NOT NULL,
SALARY NUMBER(13,4) NOT NULL,
ADDRESS VARCHAR(50) NOT NULL,
PHONE INTEGER NOT NULL,
EMPLOYEE_PIC VARCHAR(250) DEFAULT NULL,
BRANCH_ID INTEGER,
FOREIGN KEY(BRANCH_ID) REFERENCES BRANCHES(BRANCH_ID)
);

//FOR TABLE CUSTOMERS

CREATE TABLE CUSTOMERS(
ACCOUNT_NO INTEGER PRIMARY KEY,
ACCOUNT_NAME VARCHAR(50) NOT NULL,
BALANCE NUMBER(13,4) NOT NULL,
ADDRESS VARCHAR(50) NOT NULL,
PHONE INTEGER NOT NULL,
BRANCH_ID INTEGER,
FOREIGN KEY(BRANCH_ID) REFERENCES BRANCHES(BRANCH_ID)
);


//FOR TABLE TRANSACTIONS

CREATE TABLE TRANSACTIONS(
TRANSACTION_ID INTEGER PRIMARY KEY,
TYPE VARCHAR(50) NOT NULL,
AMOUNT NUMBER(13,4) NOT NULL,
PERFORMED_DATE DATE NOT NULL,
EMPLOYEE_ID INTEGER,
FOREIGN KEY(EMPLOYEE_ID) REFERENCES EMPLOYEE(EMPLOYEE_ID),
ACCOUNT_NO INTEGER,
FOREIGN KEY(ACCOUNT_NO) REFERENCES CUSTOMERS(ACCOUNT_NO)
);

//FOR TABLE ADMINS

CREATE TABLE ADMINS(
USERNAME VARCHAR(50) PRIMARY KEY,
PASSWORD VARCHAR(50) NOT NULL
);

//FOR TABLE NEWS

CREATE TABLE NEWS(
NEWS_ID PRIMARY KEY,
STORY CLOB,
PUBLISHED_DATE DATE NOT NULL
);

//FOR SEQUENCE OF ACCOUNT NUMBER

CREATE SEQUENCE SEQ_ACCOUNT
MINVALUE 12000
START WITH 12000
INCREMENT BY 10
CACHE 20;

//FOR SEQUENCE OF BRANCH ID

CREATE SEQUENCE SEQ_BRANCH
MINVALUE 100
START WITH 100
INCREMENT BY 1
CACHE 20;

//FOR SEQUENCE OF EMPLOYEE ID

CREATE SEQUENCE SEQ_EMP
MINVALUE 1000
START WITH 1000
INCREMENT BY 1
CACHE 20;

//FOR SEQUENCE OF NEWS ID

CREATE SEQUENCE SEQ_NEWS
MINVALUE 500
MAXVALUE 999
START WITH 500
INCREMENT BY 1
CACHE 20;

//FOR SEQUENCE OF TRANSACTION ID

CREATE SEQUENCE SEQ_TRANSACTION
MINVALUE 5000
START WITH 5000
INCREMENT BY 1
CACHE 10;



 